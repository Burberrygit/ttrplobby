name: Build & Deploy to Netlify (Plugin Build, cached)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Show repo tree (pre-install)
        run: |
          set -euxo pipefail
          echo "PWD:" && pwd
          echo "--- ROOT ---" && ls -la
          echo "--- frontend ---" && ls -la frontend || true
          echo "Lockfile present?" && (test -f frontend/package-lock.json && echo YES || echo NO)

      - name: Setup Node (use npm cache)
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      # Restore Next.js incremental build cache
      - name: Restore Next.js cache
        uses: actions/cache@v4
        with:
          path: frontend/.next/cache
          key: next-cache-${{ runner.os }}-${{ hashFiles('frontend/package-lock.json') }}-${{ github.ref_name }}
          restore-keys: |
            next-cache-${{ runner.os }}-${{ github.ref_name }}-
            next-cache-${{ runner.os }}-

      # Restore Netlify Next.js runtime cache
      - name: Restore Netlify cache
        uses: actions/cache@v4
        with:
          path: .netlify/cache
          key: netlify-cache-${{ runner.os }}-${{ hashFiles('frontend/package-lock.json') }}-${{ github.ref_name }}
          restore-keys: |
            netlify-cache-${{ runner.os }}-${{ github.ref_name }}-
            netlify-cache-${{ runner.os }}-

      - name: Node & npm versions
        run: |
          set -euxo pipefail
          node -v
          npm -v

      - name: Install deps (ci OR install)
        working-directory: frontend
        run: |
          set -euxo pipefail
          if [ -f package-lock.json ]; then
            npm ci
          else
            npm install
          fi
          test -d node_modules && echo "node_modules present"

      - name: Install Netlify CLI
        run: npm i -g netlify-cli

      - name: Normalize Netlify secrets
        id: norm
        env:
          RAW_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
          RAW_TOKEN:   ${{ secrets.NETLIFY_AUTH_TOKEN }}
        run: |
          set -euxo pipefail
          SITE_ID_TRIMMED="$(printf '%s' "${RAW_SITE_ID}" | tr -d '\r\n')"
          TOKEN_TRIMMED="$(printf '%s' "${RAW_TOKEN}"   | tr -d '\r\n')"
          echo "SITE_ID=${SITE_ID_TRIMMED}" >> $GITHUB_OUTPUT
          echo "TOKEN=${TOKEN_TRIMMED}"     >> $GITHUB_OUTPUT
          echo "Site ID length: ${#SITE_ID_TRIMMED}"
          echo "Token length: ${#TOKEN_TRIMMED}"

      - name: Netlify Build (with @netlify/plugin-nextjs)
        env:
          NETLIFY_AUTH_TOKEN: ${{ steps.norm.outputs.TOKEN }}
          NETLIFY_SITE_ID:    ${{ steps.norm.outputs.SITE_ID }}
        run: |
          set -euxo pipefail
          netlify build --auth "${NETLIFY_AUTH_TOKEN}" --context production --debug

      - name: Show build results
        run: |
          set -euxo pipefail
          echo "frontend/.next:"
          ls -la frontend/.next || true
          echo ".netlify:"
          ls -la .netlify || true
          echo ".netlify/functions:"
          ls -la .netlify/functions || true
          echo ".netlify/cache:"
          ls -la .netlify/cache || true

      - name: Deploy to Netlify (prod)
        env:
          NETLIFY_AUTH_TOKEN: ${{ steps.norm.outputs.TOKEN }}
          NETLIFY_SITE_ID:    ${{ steps.norm.outputs.SITE_ID }}
        run: |
          set -euxo pipefail
          netlify deploy --auth "${NETLIFY_AUTH_TOKEN}" --prod --dir "frontend/.next" --message "CI deploy $(date -u +'%Y-%m-%dT%H:%M:%SZ')"

